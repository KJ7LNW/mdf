#!/usr/bin/perl

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Library General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#  Copyright (C) 2022- by Ezekiel Wheeler, KJ7NLL and Eric Wheeler, KJ7LNW.
#  All rights reserved.
#
#  Octopart is a registered trademark and brand of Octopart, Inc.
#
#  All tradmarks, product names, logos, and brands are property of their
#  respective owners and no grant or license is provided thereof.
#
#  The copyright below applies to this software module; the copyright holder is
#  unaffiliated with Octopart, Inc.

use strict;
use warnings;
use Carp;

use Term::ANSIColor;
use Getopt::Long qw(:config bundling);
use Data::Dumper;

use RF::Component;
use RF::Component::Multi;

use API::Octopart;

my %opts;

# Defaults:
$opts{verbose} = 0;
$opts{unique} = 1;
$opts{octopart_show_stock} = 0;

my %octo_opts;

GetOptions(
	"var-code|V=s"		=> \$opts{var_code},
	"var-literal|L=s"	=> \$opts{var_literal},
	"var-name|n=s"		=> \$opts{var_name},
	"unique|u"		=> sub { $opts{unique} = 1 },
	"not-unique|U"		=> sub { $opts{unique} = 0 },
	"sort|s=s"		=> \$opts{sort},
	"mdif-var-format|c=s"	=> \$opts{var_format},
	"freqs|f=s"		=> \$opts{freqs},
	"reverse_sort|r"	=> \$opts{reverse_sort}, 
	"limit|l=s"		=> \$opts{limit},
	"verbose|v"		=> sub {$opts{verbose}++},
	"quiet|q"		=> \$opts{quiet},
	"output|o=s"		=> \$opts{output},
	"model-suffix|m=s"	=> \$opts{model_suffix},
	"srf-limit=s"           => \$opts{srf_limit},
	"octopart|O"		=> \$opts{octopart},
	"octopart-filter|F=s"	=> \$opts{octopart_filter},
	"octopart-show-stock|S"	=> sub{ $opts{octopart_show_stock}++ },

	"octopart-cache-age=s"	=> \$octo_opts{cache_age},
	"octopart-include-specs|I" => \$octo_opts{include_specs},
	"octopart-query-limit=s"=> \$octo_opts{query_limit},
	"octopart-debug-ua"	=> \$octo_opts{ua_debug},
	"octopart-debug-json"	=> \$octo_opts{json_debug},
) or usage();

usage() if ( !@ARGV );
usage("output must be specified") if ( !$opts{output} );
usage("cannot specify both --var-code and --var-literal") if ( $opts{var_code} && $opts{var_literal});

$opts{sort} //= 'reactance[0]';

my $octo;
my %octo_filter;

if ($opts{octopart_filter})
{
	$opts{octopart} = 1;
	%octo_filter = map { split /\s*=\s*/ } split(/\s*,\s*/, $opts{octopart_filter})
}

if ($opts{octopart})
{
	$octo = API::Octopart->new(
		token => (sub { my $t = `cat ~/.octopart/token`; chomp $t; return $t})->(),
		cache => "$ENV{HOME}/.octopart/cache",
		%octo_opts
		);
}

my @all_components;

my $count = 0;
foreach my $file (@ARGV)
{
	my ( $value_unit, %v);

	last if (defined($opts{limit}) && ++$count > $opts{limit});

	@v{'value_unit', 'value_code_regex'} = split(/[=]/, $opts{var_code}) if ($opts{var_code});
	@v{'value_unit', 'value_literal_regex'} = split(/[=]/, $opts{var_literal}) if ($opts{var_literal});
	$v{filename} = $file;

	$opts{var_name} //= $v{value_unit};

	my $comp = eval { RF::Component->load($file, %v) };
	warn $@ if !$comp;

	print STDERR colored(['red bold'], $@) if $@;

	next if !$comp;

	if ($opts{srf_limit})
	{
		my $srf = $comp->srf;
		if (defined($srf) && $srf < $opts{srf_limit})
		{
			my $srf_mhz = $srf / 1e6;
			my $srf_limit_mhz = $opts{srf_limit} / 1e6;
			Warn($file, "excluded: SRF of $srf_mhz < $srf_limit_mhz MHz");
			next;
		}
	}

	push @all_components, $comp;
}

# Keep these sorted in @ARGV order because we want to select
# files based on tolerance order.
# For example: GQM1555C2D???{W,B,C,D,F,G,J,K,M}*.s2p
my %seen;
my @available_components;
foreach my $c (@all_components)
{
	my %vars;

	my $model = $c->model;
	my $val = var_eval_func($c, $opts{sort});
	my $var_format = var_format($c);

	my $stock;
	if (!$seen{$val})
	{
		$stock = get_stock($c);
	}

	# Below, Perl will evaluate 'unknown', a nonzero-length string, as "true".
	# Also it pretty-prints.
	$stock //= 'unknown';

	my $api_count = 0;
	$api_count = $octo->octo_query_count() if $opts{octopart};

	if ($stock)
	{
		if ($val)
		{
			# skip to the next file if already seen:
			next if ($opts{unique} && $seen{$val});

			$seen{$val}++;
		}

		if ($opts{verbose} >= 2)
		{
			print STDERR colored(['green bold'], "$model ($var_format): $stock in stock ($api_count API calls)\n")
		}

		push @available_components, $c;
	}
	elsif ($opts{verbose} >= 3)
	{
		print STDERR colored(['red bold'], "$model ($var_format): $stock in stock ($api_count API calls)\n");
	}
}

my $out;
if ($opts{output} eq '-')
{
	$out = *STDOUT;
}
else
{
	open($out, ">", $opts{output}) or die "$opts{output}: $!";
}

my $idx = 0;
my %seller_counts;
my %part_models;

use PDL;
my @sorted_components =
	sort { var_eval_func($a, $opts{sort}) <=> var_eval_func($b, $opts{sort}) }
		@available_components;

@sorted_components = reverse @sorted_components if ($opts{reverse_sort});

# Save in magnitude-angle format, but only so `diff` shows me how well the output works.
# You can use any format you like: db, ma, ri.
my $mdf = RF::Component::Multi->new(@sorted_components);
$mdf->save($opts{output}, save_options => {format => 'MA'}, vars =>
	{
		($opts{var_name} // 'component') => sub { our $i //= 0; var_format(shift, idx => $i++) }
	});

if ($opts{verbose} >= 1)
{
	my $count = @sorted_components;
	print STDERR colored(['blue bold'], "Added $count parts to $opts{output}\n");
}

if ($opts{octopart_show_stock} >= 1)
{
	foreach my $s (sort { $seller_counts{$b} <=> $seller_counts{$a} } keys %seller_counts)
	{
		print STDERR colored(['cyan'],
			"$seller_counts{$s} parts are available through $s\n");
	}
}

close($out);

if ($opts{verbose} >= 1)
{
	if ($opts{octopart})
	{
		print STDERR colored(['white'],
			"Octopart.com API queries: " . $octo->octo_query_count() . "\n")
	}
	else
	{
		print STDERR colored(['white bold'], "Octopart.com API queries are not enabled\n");
	}
}

#print Dumper(\%files);

exit 0;

##############################################################################
# Functions

sub usage
{
	my $err = shift;
	croak colored [ qw/red bold/], "$err" if $err;

	print qq{usage: $0 [options] --var-code 'var_name=MODEL-(...)\.s2p' file1.s2p [file2...] -o mymdf.mdf

--output|-o      <file>        Output filename, required.
	If the filename is '-' then output will be written to stdout

Note that regular expressions matching filenames are always case-insensitive:

--verbose|-v                Multiple -v's increase verbosity.
	At least 4x -v's will print detailed Octopart responses.

--quiet|-q                  Suppress warnings, but does not suppress verbosity.

--limit|-l    <N>           Limit number of file evaluations to N.
	This is useful for debugging your regex with -vvv.  Glob all the files
	you want but limit to N so you only make a few Octopart queries while
	testing.

--var-code|-V    <regex>       Either of --var-code or --var-literal are required.
	Specifies the variable to be assigned and a regular expression to match
	the capacitance code (or other unit): NNX or NRN. X is the exponent, N
	is a numeric value.

	If a capacitor code is 111 then it will calculate 11*10^1 == 110 pF.  A
	code of 1N4 or 14N would be 1.4 or 14.0, respectively. The unit 'pF' in
	the example is excluded from the code.

	The (...) below must match the code or literal to be placed in the MDF
	variable. Example:
		--var-code 'C_pF=MODEL-(...)\.s2p'

--var-literal|-L <regex>       Either of --var-code or --var-literal are required.
	The var-literal version is the same as --var-code but does not
	calcualte the code, it takes the value verbatim.  For example, some
	inductors specify the number of turns in their s2p filename:
		--var-literal 'L_turns=MODEL-([0-9]+)T\.s2p'

--var-name <name>              The name of the variable used in the MDF
	If not specified, <name> defaults to "component", so something like
	this is placed in each MDF segment:

		VAR component="1. GRM1234 ..."

--freqs <freq_format>          Interpolate input files to specific frequency(ies) 

	If you omit this option then all original frequencies from the
	provided .s2p file will be included in the output.  Depending on
	your use case you may wish to normalize frequencies or reduce
	the number of entries to keep the size down.

	Examples:
		144e6-148e6x50 # 50 samples from 144 to 148 MHz
		420e6-450e6x31 # 50 samples from 420 to 450 MHz
		144e6-148e6x50,420e6-450e6x31 # combined

	See see RF::Component->at() and PDL::IO::Touchstone::m_interpolate()

--sort <var_format>            Sort MDF records in this format
	See --mdif-var-format (below).

	You can specify any variable format in --sort, just omit {}. For example:
	        --sort value
	or
	        --sort 'reactance[0]'

	Default: sort by 'reactance[0]'.

--reverse-sort|-r              Sort MDF values in reverse.

--srf-limit <hz>            Exclude parts with an SRF below <hz>
	If a part has a self-resonant frequency (SRF) below the specified
	freqency then it will be excluded from the MDF.  SRF is the point where
	reactance switches for signs.  This is the frequency at which
	capacitors become inductive and vice-versa.  The SRF curve tends to be
	asymptotic so values near SRF are likely problematic as well. Thus, it
	is a good idea to choose components that have an SRF that is well above
	the design frequency.

	For example:
		--srf-limit 1e9 # exclude SRF below 1GHz.

	Notes: 
	  1. If the component exhibits no SRF behavior (no reactance inflection)
	     then it will be included and SRF will print as a '?' symbol.
	  2. SRF values are evaluated before frequency interpolation.

--mdif-var-format <var_format> The text format of the MDF variable
	The MDIF format supports variable definitions for selecting a component in your
	EDA software.  At the moment only a single variable will be emitted, for
	example:

	        VAR pF=100

	To accomplish this would would write a --mdif-var-format as follows:

	        --var-name pF --mdif-var-format '{capacitance}'

	The syntax for the variable format is as follows:

	        {[format-specifier:]function[operator]}

	* format-specifier: If a printf format specifier is used then it will be passed
	  through `sprintf`.  For example, %.2f will limit value to 2 decimal points.
	  For example: {%.2f:capacitance}

	* function may be one of:
	   1. any function provided by RF::Component
	   2. or "idx" which will be incremented when writing to the MDIF file.

	Note that if `function` returns a PDL with more than one value then it will
	be averaged using an arithmetic mean.  If you want a specific index then see
	the [N] operator.

	* operator may be one of:
	        1. [N]: The Nth index into a PDL slice.  Negative numbers count from the end.
	        2. /N : divide by N
	        3. *N : multiply by N.
	  where N can be any floating point value

	Example 1: First SRF value
	        {idx}. {value}{value_unit} X={%.2f:reactance[0]} {model} SRF={%.2f:srf/1e9}GHz

	        VAR pF="0. 1.1pF X=-2893.38 GRM1555C1H1R1WA01 SRF=7.74GHz
	        VAR pF="1. 1.2pF X=-2652.23 GRM1555C1H1R2WA01 SRF=7.51GHz
	        VAR pF="2. 1.3pF X=-2448.19 GRM1555C1H1R3WA01 SRF=7.28GHz

	Example 2: min/max frequency range provided by the component:
	        {idx}. {value}{value_unit} {model} ({%.2f:freqs[0]/1e6}-{%.2f:freqs[-1]/1e6} MHz)

	        VAR pF="0. 1pF GRM1555C1H1R0WA01 (100.00-10050.00 MHz)"
	        VAR pF="1. 1.1pF GRM1555C1H1R1WA01 (100.00-4300.00 MHz)"
	        VAR pF="2. 1.2pF GRM1555C1H1R2WA01 (100.00-4300.00 MHz)"

--not-unique|-U                Make values NOT unique
--unique|-u                    Make values unique (default)
	Choose only the first matching sort-order value.  For example, if you specify:
		--sort 'reactance[0]'
	then additional parts with the same reactance value will be omitted;
	only the first component with the same reactance will be included. 

	If you wish to prioritize the tolerance code (or other coded metric)
	then order the file list in tolerance order.  So long as the names are
	the same except the tolerance code you could glob the tolerance code
	with braces ordered by tolerance as follows:

		GQM1555C2D???{B,C}*.s2p

	Where '???' is the value code, 'B' is +/- 0.1pF and 'C' is +/- 0.25pF
	for this example muRata part. (Note that [BC] style globbing does not
	work because the charectar class does not enforce ordering, nor does it
	support multi-charectar codes.)

	According to the muRata part guide the tolerance codes this glob lists
	in ascending order:
		GQM1555C2D???{W,B,C,D,F,G,J,K,M}*.s2p
		[ https://search.murata.co.jp/Ceramy/image/img/A01X/partnumbering_e_01.pdf ]

	Of course this technique can be used for any S2P component and is not
	specific to the manufacturer or type of component (L, C, R, etc).
	Refer to your manufacturer's documentation to choose the right
	tolerance ordering for your application.

--model-suffix|-m <suffix>  Append a string to each model

	It may be useful to append a string to the filename model when querying
	Octopart.  For example, if the Coilcraft filename is 0402-DC7N6 then a
	model-suffix of 'XG' would indicate a 2% tolerance instead of the 'XJ'
	which is a 5% tolerance.

	This string is also added to the VAR line in the .mdf.

--octopart|-O               Enable Octopart stock querying
	You will need to place your API token in ~/.octopart/token .  Queries are
	cached in ~/.octopart/cache/ to minimize redundant API requests but you
	may wish to clear that directory out periodically since stock numbers will
	become stale.

	Get your API token here: https://octopart.com/api

--octopart-cache-age <days>  Cache results for N days.
	Default is 30 days per API::Octopart.

--octopart-filter|-F <filter_opts>    This option implies -O.
	The <filter_opts> are comma-separated values passed to the
	API::Octopart class. You can get a JSON dump of values by setting
	verbose to at least 4 (-vvvv). These are common filter options to
	remember:

		min_qty=<n>    - Minimum stock quantity, per vendor.

		max_moq=<n>    - Maximum \"minimum order quantity\"
			This is the max MOQ you will accept as being in
			stock.  For example, a 5000-part reel might be more
			than you want for prototyping so set this to 10 or
			100.

		seller=<regex> - Seller's name (regular expression)
			This is a regular expression so something like
			'Mouser|Digi-key' is valid.

		mfg=<regex>    - Manufacturer name (regular expression)
			Specifying the mfg name is useful if your part model
			number is similar to those of other manufacturers.

		currency=<s>   - 'USD' for US dollars
			Defaults to include all currencies

	Example: $0 -O -F 'max_moq=100,min_qty=10,seller=Mouser|Digi-key'	

	See `perldoc API::Octopart` (or perldoc lib/API/Octopart.pm) for details.

--octopart-include-specs|-I Request product specs in the API call.
	Currently $0 does not do anything with product specs, but if you have
	an Octopart PRO account then you can enable this option ;)

--octopart-show-stock|-S    Show stock summaries
	Calling this option more than once increases the stock detail.  A
	single -S shows final summary and two -SS shows per-product per-seller
	stock detail.

--octopart-debug            Enable Octopart user agent debugging (LWP::UserAgent)

--octopart-query-limit <n>  Limit the number of request to N
\n};


	exit 1;
}

sub get_model
{
	my $component = shift;

	my $m = $component->model;
	$m .= $opts{model_suffix} // '';

	return $m;
}

sub Warn
{
	my ($file, @msg) = @_;

	return if $opts{quiet};

	# Strip the path if verbose <3
	$file =~ s!^.*/!! if ($opts{verbose} < 3);

	print STDERR colored(['yellow bold'], "$file: " . join("\n", @msg)) . "\n";
}

sub get_stock
{
	my $c = shift;
	my $model = get_model($c);

	my $stock;
	if ($opts{octopart})
	{
		$stock = $octo->has_stock($model, %octo_filter);
		if ($opts{verbose} >= 4)
		{
			print STDERR colored(['white bold'], "$model:\n\t") .
				colored(['blue'],
					Dumper($octo->get_part_stock_detail($model, %octo_filter)) . "\n");
		}
	}

	return $stock;
}

# Convert formatted strings like {reactance} or {srf/1e6} to values.  For example:
#    '{idx}. {value}{value_unit} X={reactance[0]} SRF={srf/1e9}GHz {model}'
# becomes
#    '0. 1pF X=-2209.80792664007 SRF=?GHz GRM1555C1H1R0WA01'
sub var_format
{
	my ($c, %vars) = @_;
	my $f = $opts{var_format};

	while ($f =~ /\{([^}]+)\}/g)
	{
		my $func = $1;

		my $value = var_eval_func($c, $func, %vars);

		$f =~ s/\{\Q$func\E\}/$value/g;
	}

	# Collapse multiple whitespaces to a single space:
	$f =~ s/\s+/ /g;

	return $f;
}

sub var_eval_func
{
	my ($c, $func, %vars) = @_;

	our $N //= qr/([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)/;

	# idx is always defined.
	$vars{idx} //= '?';

	my $c_interpolated = $c->at($opts{freqs});

	my ($format_spec, $func_op);
	$func =~ s/\s+//g;
	if ($func =~ /^(%[^:]+:)?(\w+)(.*$)/ && length($2))
	{
		($format_spec, $func, $func_op) = ($1, $2, $3);
		$format_spec =~ s/:// if $format_spec;
		$func_op //= '';
	}

	my @values;
	if (defined $vars{$func})
	{
		@values = $vars{$func};
	}
	elsif ($func eq 'srf')
	{
		# Get SRF from the original function because it may be
		# lost after interpolating.
		@values = $c->$func;
	}
	else
	{
		@values = $c_interpolated->$func;
	}

	my $value = $values[0];

	# Couldn't find it, return '?'
	return '?' if (!defined($value));

	if (ref($value) eq 'PDL')
	{
		# Get the index if they asked for one:
		if ($func_op =~ /\[(\d+)\]/)
		{
			$value = $value->slice($1);
		}
		else
		{
			# Get an average if >1 element:
			$value = $value->sum / $value->nelem if $value->nelem > 1;
		}

		$value = $value->sclr;
	}

	$value /= $1 if ($func_op =~ m!\/($N)!);
	$value *= $1 if ($func_op =~ m!\*($N)!);

	if ($format_spec)
	{
		$value = sprintf($format_spec, $value);
	}

	return $value;
}
